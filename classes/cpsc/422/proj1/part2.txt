consumer 3 got item 0  
consumer 4 got item 10 
consumer 5 got item 20 
consumer 3 got item 1  
consumer 4 got item 11 
consumer 5 got item 21 
consumer 3 got item 2  
consumer 4 got item 12 
consumer 5 got item 22 
consumer 3 got item 3  
consumer 4 got item 13 
consumer 5 got item 23 
consumer 3 got item 4  
consumer 4 got item 14 
consumer 5 got item 24 
consumer 3 got item 5  
consumer 4 got item 15 
consumer 5 got item 25 
consumer 3 got item 6  
consumer 4 got item 16 
consumer 5 got item 26 
consumer 3 got item 7  
consumer 4 got item 17 
consumer 5 got item 27 
consumer 3 got item 8  
consumer 4 got item 18 
consumer 5 got item 28 
consumer 3 got item 9  
consumer 4 got item 19 
consumer 5 got item 29 
all done               

item:consumer
0:3 1:3 2:3 3:3 4:3 5:3 6:3 7:3 8:3 9:3
10:4 11:4 12:4 13:4 14:4 15:4 16:4 17:4 18:4 19:4
20:5 21:5 22:5 23:5 24:5 26:5 27:5 28:5 29:5

Problem: producing 5 items before we consume
Not an issue, since our buffer is large enough to handle all of our producers, and it is not possible for multiple producers to make more than one production before it is consumed.

Problem: Consuming before producing
Both semaphores n and s must be set before we can consume.  Thus, this cannot happen.

Problem: two consumers or two producers operating simultaneously
No producer or consumer can operate at the same time.  Thus, there is only one thread operating on the in/out/buffer variables at a single time, and so insert and remove are atomic.  This is no longer a problem with this setup.