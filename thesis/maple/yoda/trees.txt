interface(quiet=true,warnlevel=0):

# ---------------------------------------------------------------------------- #
# isomorphism testing functions                                                #
# ---------------------------------------------------------------------------- #

# LLT determines if p is lexicographically less than q.
# INPUT: Two lists p and q of tree binames, represented by 0's and 1's.
# OUTPUT: true if p is lexicographically less than q, false otherwise.
LLT := proc(p,q:list)
  local i, m:

  # m is the length of the shorter of p and q
  m := nops(p):
  if nops(q) < m then m := nops(q) fi:

  # check to see if p is less than q, up to position m
  for i to m do
    if p[i] < q[i] then
      RETURN(true):
    fi:
    if p[i] > q[i] then
      RETURN(false):
    fi:
  od:

  # if we are still here, then compare lengths
  if nops(p) <= nops(q) then
    RETURN(true):
  else
    RETURN(false):
  fi:
end:

# smerg merges a list of binames into a single list r in lexicographic order, 
# and places a 0 to the left and a 1 to the right of the merged list.  This is
# useful for traversing a tree.
# INPUT: s is a list of binames to be merged.
# OUTPUT: r is the merged list.
smerg := proc(s: list)
  local d,j,k,q,r:

  # d is the number of lists in s to be merged.
  d := nops(s):
  # q is the list s in sorted order.
  q := [[9]]:

  # sort the list  
  for k from 1 to d do
    j := 1:
    # find the correct position of s[k]
    while not LLT(s[k], q[j]) do
      j := j+1:
    od:
    q := [op(1..j-1,q),s[k],op(j..nops(q),q)]:
  od:

  # construct r from q
  r := [0]:
  for k to d do
    r := [op(r), op(q[k])]:
  od:
  r := [op(r),1]:

  # Return r to the caller.
  RETURN(r):
end:

# LocalMinname generates the lexicographically least biname (minname) for each
# possible node in a tree.
# INPUT: A child array c representing the tree, a heap ordering h of its
# vertices, and an integer n representing the number of nodes.
# OUTPUT: r is an array of binames, where r[x] gives the lexicographically
# least biname representing the branch of the rooted tree beyond node x.
# NOTE: The root must receive the highest label, namely n.
LocalMinnameArr := proc(c:array, h:list, n:integer)
  local i, r, s, x, y:
  r := array(1..n):
  # Traverse the entire tree using the heap ordering
  for i to n do
    x := h[i]:
    s := []:
    # Combine binames of the children of the current node
    for y in c[x] do
      s := [op(s),r[y]]:
    od:
    # Find the minimal biname at this point and create the biname for this subtree
    r[x] := smerg(s):
  od:
  RETURN(r):
end:

# GlobalMinname generates the lexicographically least biname for an input unrooted
# tree.  The procedure starts with a local best labelling rooted at n.  Then
# the procedure moves from parent w to child v throughout the tree, modifying
# the existing local labellings to produce best local labellings t for each
# node as root.  Along the way a local branch labelling tt is required at
# the parent w of v by regarding v as the root and w as the root of one
# branch at v.
# INPUT: a child array c, representing the tree, a heap ordering h as a list,
# the parent list p, and an integer n representing the number of nodes and the
# label of the root.
# OUTPUT: best is the lexicographically least biname for the input tree.
GlobalMinname := proc(c:array, h:list, p:list, n:integer)
  local best, i, r, s, t, tt, v, w, y:

  # Generate an array of local minnames for each possible root node
  r := LocalMinnameArr(c,h,n):

  t := array(1..n):
  tt := array(1..n):
  tt[n] := []:
  t[n] := r[n]:
  best := r[n]:

  # Find the root with the lexicographically least associated minname
  for i from n-1 to 1 by -1 do
    v := h[i]:
    w := p[v]:
    s := [tt[w]]:
    for y in c[w] do
      if y=v then next fi:
      s := [op(s),r[y]]:
    od:
    tt[v] := smerg(s):
    s :=  [tt[v]]:
    for y in c[v] do
      s := [op(s),r[y]]:
    od:
    t[v] := smerg(s):

    # If the current root is lexicographically less than the best root found so far,
    # then set best accordingly.
    if LLT(t[v],best) then best := t[v] fi:
  od:

  # Return the lexicographically least minname.
  RETURN(best):
end:

# ---------------------------------------------------------------------------- #
# subtree generation functions                                                 #
# ---------------------------------------------------------------------------- #

# nextree produces the next spanning tree in a graph with given input ordered edge
# set.
# INPUT:
#   e is the list of edges of the graph whose order determines the ordering
#     of the spanning subtrees
#   ctr is an array of list sets where ctr[i[ is a list of the sets of edges
#     which must be used before edge i is used.
#   m is the number of edges in e
#   e is the number of nodes in the graph
# OUTPUT: the number of edges in the next tree.  If j=0, then there is no next tree and
# the search through all spanning subtrees is over.
# GLOBALS:
#   f lists the indices i of the edges e[i] used in the spanning tree.  The program is
#     designed so that f is always an increasing list.
#   g is an nxn array with g(j,v) telling the component number of vertex v at the jth
#     stage of building the subtree.  At stage j=0, these numbers are all different.
#     At stage j=n-1 all these numbers should be the same.
#   f and g are used to determine the starting point in the next call of nextree.
nextree := proc(e:list, ctr:array, m,n:integer)
  local backtrack, i, j, k, s, v, x, y:
  global f,g:

  k := nops(f):
  if k = (n-1) then
    j := k:
    i := f[k]+1:
    f := [op(1..k-1,f)]:
  elif k > 0 then
    j := k+1:
    i := f[k]+1:
  else
    j := 1:
    i := 1:
  fi:

  # We are not backtracking initially
  backtrack := false:

  while j < n do
    for s in ctr[i] do
      # If there are no common vertices between s and f, then set backtrack
      if nops(s intersect {op(f)}) = 0 then
        backtrack := true:
        break:
      fi:
    od:
    # If (the number of edges in the spanning tree) - (the index of the edge) + 1
    # is less than (the number of nodes in the graph) - (the stage of building the
    # subtree) then set backtrack?
    if (m-i+1) < (n-j) then backtrack := true fi:

    if backtrack then    
      j := j-1:
      if j = 0 then RETURN(j) fi:
      i := f[j]+1:
      f := [op(1..j-1,f)]:
      backtrack := false:
    else
      x := g[j-1,op(1,e[i])]:
      y := g[j-1,op(2,e[i])]:
      if x = y then
        i := i+1:
      else
        f := [op(f),i]:
        for v to n do
          if g[j-1,v] = y then
            g[j,v] := x:
          else 
            g[j,v] := g[j-1,v]:
          fi:
        od:
        j := j+1:
        i := i+1:
      fi:
    fi:
  od:
  RETURN(j):
end:

# childe produces a child array c, a heap order h, and a parent list p from an input
# list e of edges for a spanning subtree.
# INPUT: a list of edges e and the number of nodes n
# OUTPUT: none.
# GLOBALS:
#   c is a child array
#   h is a heap order as a list
#   p is a parent list
childe := proc(e:list, n:integer)
  local doitnow, doitlater, undun, i,k,pa,x,y:
  global c,h,p:
  undun := {}:
  for i to n-1 do
    c[i] := {}:
    undun := undun union {i}:
  od:
  c[n] := {}:
  doitnow := {n}:
  doitlater := {}:
  h := [n]:
  pa := array(1..n-1):
  k := 1:
  colordiff := 1:
  while nops(undun) > 0 do
    k := -k:
    for x in doitnow do
      for i in undun do
        if member(x,e[i]) then
          y := e[i][1]:
          if x = y then y := e[i][2] fi:
          c[x] := c[x] union {y}:
          pa[y] := x:
          h := [y,op(h)]:
          undun := undun minus {i}:
          doitlater := doitlater union {y}:
        fi:
      od:             
    od:
    doitnow := doitlater:
    doitlater := {}:
  od:
  p := []:
  for x to n-1 do
    p := [op(p),pa[x]]:
  od:
end:

# gbuild produces the nxn component status array g for a given edge list e and
# globally passed(partial) edge-index selector f.
# INPUT: an edge list e and the number of nodes n
# OUTPUT: none.
# GLOBALS:
#   f lists the indices of the edges e[i] used in the spanning tree.
gbuild := proc(e:list, n:integer)
  local g,v,j,x,y:
  global f:
  g := array(0..n-1,1..n):
  for v to n do
    g[0,v] := v:
  od:
  for j to nops(f) do
    x := g[j-1,op(1,e[f[j]])]:
    y := g[j-1,op(2,e[f[j]])]:
    for v to n do
      if g[j-1,v] = y then
        g[j,v] := x:
      else 
        g[j,v] := g[j-1,v]:
      fi:
    od:
  od:
  RETURN(g):
end:

# ---------------------------------------------------------------------------- #
# output formatting functions                                                  #
# ---------------------------------------------------------------------------- #

shortname := proc(lpe:list)
  local i,k,n,z,par,sum,x,y:
  n := nops(lpe):
  z := 0:
  for i to n do
    z := z + lpe[n-i+1] * 2^(i-1):
  od:
  y := [z]:
  k := 1:
  par := 0:
  sum := 0:
  for k to n do
    x := lpe[k]:
    if x = 0 and par = 0 then
      sum := sum + o:
    elif x = 1 and par = 1 then
      sum  := sum + 1:
    elif x <par then
      y := [op(y), sum]:
      par := x:
      if x = 0 then sum := o fi:
      if x = 1 then sum := 1 fi:
    fi:
  od:
  y := [op(y), sum]:
  RETURN(y):
end:

cleanup := proc(s:list)
  local N, k, sn, place, j, z, snlist:
  global  t:
  N := nops(s):
  sn := shortname(s[1]):
  snlist := [sn]:
  t[sn] := s[1]:
  for k from 2 to N do
    sn := shortname(s[k]):
    t[sn] := s[k]:
    place := -1:
    z := sn[1]:
    for j to k-1 do
      if snlist[j][1] > z then
        place := j-1:
        break:
      fi:
    od:
    if place < 0 then 
      snlist := [op(snlist),sn]:
    elif place = 0 then
      snlist := [sn, op(snlist)]:
    elif place > 0 then
      snlist := [op(1..place,snlist),sn, op(place+1..k-1,snlist)]:
    fi:
  od:
  RETURN(snlist):
end:

dumpum := proc(e:list)
  local k, subtreez, sn, treq, notreq: 
  global  edges, tcount, subtrees, nr, reqedge,t, nrmd,ds:
  print(`The`, m, `edges are`, e):
  print(`number of trees found`, tcount):
  print(`number of NON-ISOMORPHIC trees found`, nops(subtrees)):
  for k to 20 do
    if nrmd[k] > 0 then 
      print( nrmd[k],` NON-ISOMORPHIC trees with maxdeg`, k):
    fi:
  od:
  subtreez := cleanup(subtrees):
  for sn in subtreez do
    print(sn):
    print(nr[t[sn]],ds[t[sn]]):
    print(edges[t[sn]]):
  od:
  notreq := []:
  for k to nops(e) do
    treq := []:
    for sn in subtreez do
      if member(k, reqedge[t[sn]]) then
        treq := [op(treq), sn[1]]:
      fi:
    od:
    if nops(treq) > 0 then
      print(`Edge`, e[k], `is required by trees`, treq):
    else
      notreq := [op(notreq), e[k]]:
    fi:
  od:
  print(`Edges not required:`, notreq):
  RETURN(subtreez);
end:

# ---------------------------------------------------------------------------- #
# main program                                                                 #
# ---------------------------------------------------------------------------- #

# spantree determines all spanning trees of a graph with edge list e
# INPUT:
#   e is a list of edges of the supergraph
#   ctr is an array of list sets where ctr[i[ is a list of
#     the sets of edges which must be used before edge i is used.
#     For example, if the edges incident with a vertex v are 1, 3 and 7, then the list
#     ctr[8] would contain the set {1,3,7} because at least one of these edges must be
#     used if the result is to connect with vertex v.  Since edges are added in order,
#     one of 1, 3, or 7 must be used before 8 or there is no hope of getting a connected
#     subtree.
#   m is the number of edges in e
#   e is the number of nodes in the graph
# OUTPUT: none.
# GLOBALS:
#   f lists the indices i of the edges e[i] used in the spanning tree.  The program is
#     designed so that f is always an increasing list.
#   g is an nxn array with g(j,v) telling the component number of vertex v at the jth
#     stage of building the subtree.  At stage j=0, these numbers are all different.
#     At stage j=n-1 all these numbers should be the same.
#   f and g are used to determine the starting point in the next call of nextree.
#   c is a child array
#   h is a heap order as a list
#   p is a parent list
#   t is a table which stores for each shortname the corresponding minname.  It is
#     generated in the cleanup procedure and passed as a global variable.
# GLOBALS for USE in dumpum:
#   edges is a table indexed by minname which stores the edges used to produce the
#     first instance of a subtree of isomorphism type minname.
#   reqedge is a table indexed by minname which stores the set of indices of edges
#     required so far in all instances of minname encountered so far.
#   subtrees is a list of the minnames of the non-isomorphic spanning subtreees, listed
#     in the order they are found.
#   tcount is the total number of spanning subtrees
#   nr is a table containing the number of copies if tree minname have been found so far
#   nrmd is an array containing the number of isomorphism types with max degree k
#   ds is a table for each minname the degree sequence of that tree
spantree := proc(e:list, ctr:array, n:integer, freq:integer)
  local  edgs, i, j, k, m, time1, time2, TIME1, TIME2, avertime, lpe, jcount,
         tc, subtreez, nn, sn, treq:
  global f,g,c,h,p,sh,t,edges, tcount, subtrees, nr, reqedge, maxdeg, nrmd,ds:
  TIME1 := time():
  nrmd := array(sparse, 1..20):
  m := nops(e):
  c := array(1..n):
  f := []:
  g := gbuild(e,n):
  h := []:
  p := []:
  subtrees := []:
  time1 := time():
  tcount := 0:
  jcount := nextree(e,ctr,m,n):
  while(jcount > 0) do
    edgs := []:
    for k from 1 to n-1 do
      edgs := [op(edgs), e[f[k]]]:
    od:
    childe(edgs,n):
    lpe := GlobalMinname(c,h,p,n):
    if member(lpe, subtrees) then
      nr[lpe] := nr[lpe] + 1:
      reqedge[lpe] := {op(f)} intersect reqedge[lpe]:
    else
      subtrees := [op(subtrees), lpe]:
      ds[lpe] := degseq(edgs,n):
      nrmd[maxdeg] := nrmd[maxdeg] + 1:
      nr[lpe] := 1:
      edges[lpe] := edgs:
      reqedge[lpe] := {op(f)}:
    fi:
    tcount := tcount+1:
    tc := tcount mod freq:
    if tc = 0 then
      time2 := time():
      avertime := (time2-time1)/freq:
      print(`current subtree is given by`, f):
      print(tcount, `subtrees found at`, avertime,`average time per tree`):
      print(nops(subtrees),`currently found isomorphism types of spanning trees`):
      time1 := time():
    fi:
    jcount := nextree(e,ctr,m,n):
  od:
  subtreez := dumpum(e):
  TIME2 := time():
  print(`Total time elapsed`, TIME2-TIME1):
  RETURN(subtreez):
end:

# setctr initializes m and the control array ctr
# INPUT: a list of edges e and the number of vertices n
# OUTPUT: the control array ctr
# GLOBALS:
#   m is the number of edges in the graph
setctr := proc(e:list, n)
  local ctr,deg, i, v, vert, bond, maxi:
  global m:
  deg := []:
  m := nops(e);
  ctr := array(1..m+1):
  for i to m+1 do
    ctr[i] := []:
    vert[i] := []:
  od:
  for v from 1 to n do
    bond := {}:
    maxi := 0:
    for i from 1 to m do
      if member(v,e[i]) then
        bond := bond union {i}:
        maxi := i+1:
      fi:
    od:
    ctr[maxi] := [op(ctr[maxi]),bond]:
    vert[maxi] := [op(vert[maxi]), v]:
    deg := [op(deg), [v, nops(bond)]]:
  od:
  print(`Es gibt`, m, `Kanten.  The vertex degrees are`):
  print(deg):
  for i from 1 to m+1 do
    if nops(ctr[i]) > 0 then
      print(i, ctr[i]):
      print(i, vert[i]):
    fi:
  od:
  ctr;
end:
